generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Gender {
  Male
  Female
  Other
}

enum Role {
  Owner
  Manager
  Cashier
  Chef
  Waiter
}

enum PaymentMethod {
  CASH // สำหรับเงินสด
  TRANSFER // สำหรับเงินโอน
}

// sss
enum OrderStatus {
  PENDING // รอเข้าระบบ/รอครัว
  COOKING // กำลังทำ
  READY // พร้อมเสิร์ฟ
  SERVED // เสิร์ฟแล้ว
  PAID // จ่ายแล้ว
}

// --- Models ---
model Employee {
  id        Int      @id @default(autoincrement())
  fname     String
  lname     String
  gender    Gender
  phone     String
  dob       DateTime
  role      Role
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  foods     Food[]
  drinks    Drink[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id           Int           @id @default(autoincrement())
  name         String
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  price        Float
  imageUrl     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetail[]
}

model Supplier {
  id             Int             @id @default(autoincrement())
  name           String
  address        String
  phone          String
  email          String
  purchaseOrders PurchaseOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ImportReceipt  ImportReceipt[]
}

model Drink {
  id              Int                   @id @default(autoincrement())
  name            String
  qty             Int?
  price           Decimal
  imageUrl        String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  purchaseDetails PurchaseOrderDetail[]
  importDetails   ImportDetail[]
  Category        Category?             @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  OrderDetail     OrderDetail[]
}

model PurchaseOrder {
  id            Int                   @id @default(autoincrement())
  supplier      Supplier              @relation(fields: [supplierId], references: [id])
  supplierId    Int
  orderDate     DateTime              @default(now())
  totalPrice    Float
  status        String                @default("pending") // pending, approved, cancelled
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  details       PurchaseOrderDetail[]
  ImportReceipt ImportReceipt[]
}

model PurchaseOrderDetail {
  id            Int           @id @default(autoincrement())
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  poId          Int
  drink         Drink         @relation(fields: [drinkId], references: [id])
  drinkId       Int
  quantity      Int
  price         Float
  createdAt     DateTime      @default(now())
}

model ImportReceipt {
  id              Int            @id @default(autoincrement())
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  supplierId      Int
  importDate      DateTime       @default(now())
  totalPrice      Float
  status          String         @default("pending") // pending, completed, cancelled
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  details         ImportDetail[]
  purchaseOrderId Int?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
}

model ImportDetail {
  id            Int           @id @default(autoincrement())
  importReceipt ImportReceipt @relation(fields: [importId], references: [id], onDelete: Cascade)
  importId      Int
  drink         Drink         @relation(fields: [drinkId], references: [id])
  drinkId       Int
  quantity      Int
  price         Float
  createdAt     DateTime      @default(now())
}

model Order {
  id            Int           @id @default(autoincrement())
  employee      Employee      @relation(fields: [empId], references: [id])
  empId         Int
  orderDate     DateTime      @default(now())
  total_price   Float
  paymentMethod PaymentMethod
  status        OrderStatus   @default(PENDING) // เพิ่มสถานะออเดอร์
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt // เปลี่ยนเป็น DateTime? (Optional)
  orderDetails  OrderDetail[]
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [ord_id], references: [id], onDelete: Cascade) // เพิ่ม onDelete: Cascade
  ord_id    Int
  food      Food?    @relation(fields: [foodId], references: [id])
  foodId    Int?
  drink     Drink?   @relation(fields: [drinkId], references: [id])
  drinkId   Int?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}

model Table {
  id           Int           @id @default(autoincrement())
  table_number Int
  status       String        @default("ວ່າງ") // อาจจะเปลี่ยนเป็น Enum TableStatus ได้ในอนาคต
  seat         Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Reservation  Reservation[]
}

model Customer {
  id          Int           @id @default(autoincrement())
  fname       String
  lname       String
  phone       String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
}

model Reservation {
  id              Int      @id @default(autoincrement())
  customer        Customer @relation(fields: [customerId], references: [id])
  customerId      Int
  table           Table    @relation(fields: [tableId], references: [id])
  tableId         Int
  reservationTime DateTime
  status          String   @default("pending") // เช่น pending, confirmed, cancelled - อาจจะเปลี่ยนเป็น Enum ReservationStatus ได้
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
