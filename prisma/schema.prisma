generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Gender {
  Male
  Female
  Other
}

enum Role {
  Owner
  Manager
  Cashier
  Chef
  Waiter
}

// สถานะครัว (ใช้ตัวนี้เป็นหลัก)
enum KitchenStatus {
  PENDING // รอเข้าระบบ/รอครัว
  COOKING // กำลังทำ
  READY // พร้อมเสิร์ฟ
  SERVED // เสิร์ฟแล้ว
}

// สถานะบิล
enum BillStatus {
  OPEN // โต๊ะเปิดอยู่, สั่งเพิ่มได้, ยังไม่ชำระ
  PAID // ชำระเงินแล้ว
  CANCELLED // ยกเลิก
}

// วิธีการชำระเงิน
enum PaymentMethod {
  CASH // สำหรับเงินสด
  TRANSFER // สำหรับเงินโอน
}

// --- Models ---
model Employee {
  id        Int      @id @default(autoincrement())
  fname     String
  lname     String
  gender    Gender
  phone     String
  dob       DateTime
  role      Role
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("employees")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  foods     Food[]
  drinks    Drink[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// --- ส่วนจัดการสต็อกเครื่องดื่ม ---

// 1. หน่วยพื้นฐานทางกายภาพ (เล็กที่สุด)
model Unit {
  id        Int       @id @default(autoincrement())
  name      String    @unique // หน่วยพื้นฐาน: ขวด, กระป๋อง, แก้ว
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  drinks    Drink[]

  @@map("units")
}

// 2. หน่วยขาย/หน่วยจัดซื้อ (แพ็กเกจ)
model ProductUnit {
  id              Int                   @id @default(autoincrement())
  name            String                // ชื่อหน่วย เช่น "ลัง 12 ขวด", "แพ็ค 6 กระป๋อง", "ขวดเดี่ยว"
  price           Float                 // ราคาขายสำหรับหน่วยนี้ (เช่น ราคาต่อลัง, ราคาต่อขวด)
  drinkId         Int                   // เชื่อมกับเครื่องดื่มหลัก
  drink           Drink                 @relation(fields: [drinkId], references: [id], onDelete: Cascade)
  baseItemsCount  Int                   // จำนวนหน่วยย่อยในแพ็กเกจนี้ (เช่น 12, 6, 1)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  purchaseDetails PurchaseOrderDetail[]
  orderDetails    OrderDetail[]

  @@map("product_units")
}

// 3. สินค้าเครื่องดื่ม (สต็อกนับเป็นหน่วยพื้นฐาน)
model Drink {
  id           Int            @id @default(autoincrement())
  name         String         // เช่น "เบียร์สิงห์", "โค้ก"
  qty          Int            @default(0) // สต็อกในหน่วยย่อยที่สุดเสมอ (จำนวนขวด/กระป๋อง ทั้งหมด)
  imageUrl     String
  baseUnitId   Int            // FK ไปยัง Unit เพื่อบอกหน่วยพื้นฐาน
  baseUnit     Unit           @relation(fields: [baseUnitId], references: [id])
  categoryId   Int?
  Category     Category?      @relation(fields: [categoryId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  productUnits ProductUnit[]  // 1 เครื่องดื่ม สามารถมีได้หลายหน่วยขาย
  importDetails ImportDetail[]

  @@map("drinks")
}

// --- สิ้นสุดส่วนจัดการสต็อกเครื่องดื่ม ---

model Food {
  id           Int           @id @default(autoincrement())
  name         String
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  price        Float
  imageUrl     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetail[]

  @@map("foods")
}

model Supplier {
  id             Int             @id @default(autoincrement())
  name           String
  address        String
  phone          String
  email          String
  purchaseOrders PurchaseOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ImportReceipt  ImportReceipt[]

  @@map("suppliers")
}

// --- ส่วนการจัดซื้อและนำเข้า ---

model PurchaseOrder {
  id            Int                     @id @default(autoincrement())
  supplier      Supplier                @relation(fields: [supplierId], references: [id])
  supplierId    Int
  orderDate     DateTime                @default(now())
  totalPrice    Float
  status        String                  @default("pending") // pending, approved, cancelled
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  details       PurchaseOrderDetail[]
  ImportReceipt ImportReceipt[]

  @@map("purchase_orders")
}

model PurchaseOrderDetail {
  id            Int           @id @default(autoincrement())
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  poId          Int
  productUnitId Int           // สั่งซื้อเป็นหน่วย ProductUnit (ลัง, แพ็ค)
  productUnit   ProductUnit   @relation(fields: [productUnitId], references: [id])
  quantity      Int           // จำนวนของ ProductUnit ที่สั่ง (เช่น 2 ลัง)
  price         Float         // ราคาต่อหน่วยที่สั่งซื้อ (ราคาต่อลัง)
  createdAt     DateTime      @default(now())

  @@map("purchase_order_details")
}

model ImportReceipt {
  id              Int            @id @default(autoincrement())
  supplier        Supplier       @relation(fields: [supplierId], references: [id])
  supplierId      Int
  importDate      DateTime       @default(now())
  totalPrice      Float
  status          String         @default("pending") // pending, completed, cancelled
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  details         ImportDetail[]
  purchaseOrderId Int?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  @@map("import_receipts")
}

model ImportDetail {
  id            Int           @id @default(autoincrement())
  importReceipt ImportReceipt @relation(fields: [importId], references: [id], onDelete: Cascade)
  importId      Int
  drink         Drink         @relation(fields: [drinkId], references: [id])
  drinkId       Int
  quantity      Int           // จำนวนหน่วยพื้นฐานที่นำเข้า
  price         Float
  createdAt     DateTime      @default(now())

  @@map("import_details")
}

// --- ส่วนจัดการโต๊ะและออเดอร์ ---

model Table {
  id            Int           @id @default(autoincrement())
  table_number  Int
  status        String        @default("ວ່າງ")
  seat          Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Reservation   Reservation[]
  Order         Order[]

  @@map("tables")
}

model Order {
  id             Int           @id @default(autoincrement())
  employee       Employee      @relation(fields: [empId], references: [id])
  empId          Int
  table          Table         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId        Int
  orderDate      DateTime      @default(now())
  total_price    Float
  billStatus     BillStatus    @default(OPEN)
  payment_method PaymentMethod?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderRounds    OrderRound[]

  @@map("orders")
}

model OrderRound {
  id            Int           @id @default(autoincrement())
  orderId       Int
  roundNumber   Int
  kitchenStatus KitchenStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderDetails  OrderDetail[]

  @@map("order_rounds")
}

model OrderDetail {
  id            Int          @id @default(autoincrement())
  orderRound    OrderRound   @relation(fields: [orderRoundId], references: [id], onDelete: Cascade)
  orderRoundId  Int
  food          Food?        @relation(fields: [foodId], references: [id])
  foodId        Int?
  productUnitId Int?         // ขายเครื่องดื่มเป็นหน่วย ProductUnit
  productUnit   ProductUnit? @relation(fields: [productUnitId], references: [id])
  quantity      Int
  price         Float        // ราคา ณ ตอนที่ขาย
  createdAt     DateTime     @default(now())

  @@map("order_details")
}

// --- ส่วนลูกค้าและการจอง ---

model Customer {
  id          Int           @id @default(autoincrement())
  fname       String
  lname       String
  phone       String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]

  @@map("customers")
}

model Reservation {
  id              Int      @id @default(autoincrement())
  customer        Customer @relation(fields: [customerId], references: [id])
  customerId      Int
  table           Table    @relation(fields: [tableId], references: [id])
  tableId         Int
  reservationTime DateTime
  status          String   @default("pending") // pending, confirmed, cancelled
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("reservations")
}