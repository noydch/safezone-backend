const prisma = require('../config/prisma');

/**
 * üìå CREATE PURCHASE ORDER
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (ProductUnit)
 * @param {object} req.body - { supplierId: number, details: [{ productUnitId: number, quantity: number, price: number }] }
 */
exports.createPurchaseOrder = async (req, res) => {
    const { supplierId, details } = req.body;
    // console.log(req.body);

    // --- Validation ---
    if (!supplierId || !details || !Array.isArray(details) || details.length === 0) {
        return res.status(400).json({ message: "Supplier ID and order details are required." });
    }

    // ‚ú® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `details` ‡∏°‡∏µ `productUnitId` ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    for (const item of details) {
        console.log(item);
        if (!item.productUnitId || !item.quantity || item.quantity <= 0 || item.price === undefined || item.price < 0) {
            return res.status(400).json({ message: `Invalid detail item: ${JSON.stringify(item)}. Ensure productUnitId, positive quantity, and non-negative price are provided.` });
        }
    }

    try {
        // --- Transaction ---
        const newPurchaseOrder = await prisma.$transaction(async (tx) => {
            // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Supplier ‡πÅ‡∏•‡∏∞ ProductUnit ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            const supplier = await tx.supplier.findUnique({ where: { id: Number(supplierId) } });
            if (!supplier) {
                // ‡πÉ‡∏ä‡πâ throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ transaction rollback ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                throw new Error("Supplier not found.");
            }

            const productUnitIds = details.map(d => d.productUnitId);
            const productUnits = await tx.productUnit.findMany({
                where: { id: { in: productUnitIds } }
            });

            if (productUnits.length !== productUnitIds.length) {
                throw new Error("One or more product units not found.");
            }

            // 2. ‚ú® ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô `details` (‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠)
            const totalPrice = details.reduce((sum, item) => sum + item.price * item.quantity, 0);

            // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Purchase Order ‡∏´‡∏•‡∏±‡∏Å
            const purchaseOrder = await tx.purchaseOrder.create({
                data: {
                    supplierId: Number(supplierId),
                    totalPrice: totalPrice,
                    status: "pending", // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                }
            });

            // 4. ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Purchase Order Details ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á `productUnitId`
            const detailCreations = details.map(detail => {
                return tx.purchaseOrderDetail.create({
                    data: {
                        poId: purchaseOrder.id,
                        productUnitId: Number(detail.productUnitId),
                        quantity: Number(detail.quantity),
                        price: Number(detail.price) // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
                    }
                });
            });

            await Promise.all(detailCreations);

            // 5. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ PO ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            return tx.purchaseOrder.findUnique({
                where: { id: purchaseOrder.id },
                include: {
                    supplier: true,
                    details: {
                        include: {
                            // ‚ú® ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á drink
                            productUnit: {
                                include: {
                                    drink: true
                                }
                            }
                        }
                    }
                }
            });
        });

        res.status(201).json(newPurchaseOrder);

    } catch (error) {
        console.error("Error creating purchase order:", error);
        // ‡πÅ‡∏¢‡∏Å error case ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        if (error.message.includes("not found")) {
            return res.status(404).json({ message: error.message });
        }
        res.status(500).json({ message: "Server Error creating purchase order" });
    }
};


/**
 * üìå GET ALL PURCHASE ORDERS
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
exports.getAllPurchaseOrders = async (req, res) => {
    try {
        const purchaseOrders = await prisma.purchaseOrder.findMany({
            include: {
                supplier: true,
                details: {
                    include: {
                        // ‚ú® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç path ‡∏Ç‡∏≠‡∏á include ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° schema
                        productUnit: {
                            include: {
                                drink: true
                            }
                        }
                    }
                }
            },
            orderBy: {
                createdAt: 'desc'
            }
        });
        res.json(purchaseOrders);
    } catch (error) {
        console.error("Error fetching purchase orders:", error);
        res.status(500).json({ message: "Server Error fetching purchase orders" });
    }
};

/**
 * üìå GET PURCHASE ORDER BY ID
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏° ID
 */
exports.getPurchaseOrderById = async (req, res) => {
    try {
        const { id } = req.params;
        const purchaseOrder = await prisma.purchaseOrder.findUnique({
            where: { id: Number(id) },
            include: {
                supplier: true,
                details: {
                    include: {
                        // ‚ú® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç path ‡∏Ç‡∏≠‡∏á include ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        productUnit: {
                            include: {
                                drink: true
                            }
                        }
                    }
                }
            }
        });

        if (!purchaseOrder) {
            return res.status(404).json({ message: "Purchase Order not found" });
        }
        res.json(purchaseOrder);
    } catch (error) {
        console.error("Error fetching purchase order by ID:", error);
        res.status(500).json({ message: "Server Error fetching purchase order" });
    }
};

/**
 * üìå UPDATE PURCHASE ORDER STATUS
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô 'approved', 'cancelled')
 * ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'approved' ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Drink)
 */
exports.updatePurchaseOrderStatus = async (req, res) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        if (!status || !['pending', 'approved', 'cancelled'].includes(status)) {
            return res.status(400).json({ message: "Invalid or missing status. Allowed: pending, approved, cancelled" });
        }

        const updatedPo = await prisma.$transaction(async (tx) => {
            // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PO ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const purchaseOrder = await tx.purchaseOrder.findUnique({
                where: { id: Number(id) },
                // ‚ú® ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `productUnit` ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ `baseItemsCount` ‡πÅ‡∏•‡∏∞ `drinkId`
                include: {
                    details: {
                        include: {
                            productUnit: true
                        }
                    }
                }
            });

            if (!purchaseOrder) {
                throw new Error('P2025'); // ‡πÇ‡∏¢‡∏ô Error ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Prisma (Record not found)
            }

            // 2. ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ `approve` ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
            if (purchaseOrder.status === 'approved' && status === 'approved') {
                console.warn(`Purchase order ${id} is already approved. No stock update performed.`);
                return purchaseOrder; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
            }

            // 3. ‚ú® ‡∏´‡∏≤‡∏Å `approve` ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å
            if (status === 'approved') {
                const stockUpdates = purchaseOrder.details.map(detail => {
                    if (!detail.productUnit) {
                        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• productUnit ‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô
                        throw new Error(`Product unit data missing for detail ID: ${detail.id}`);
                    }

                    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å
                    // (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à * ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à)
                    const quantityToAdd = detail.quantity * detail.productUnit.baseItemsCount;

                    return tx.drink.update({
                        where: { id: detail.productUnit.drinkId }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `Drink` ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        data: {
                            qty: {
                                increment: quantityToAdd // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
                            }
                        }
                    });
                });
                await Promise.all(stockUpdates);
            }

            // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á PO
            return tx.purchaseOrder.update({
                where: { id: Number(id) },
                data: { status: status },
                include: { // include ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ client
                    supplier: true,
                    details: {
                        include: {
                            productUnit: { include: { drink: true } }
                        }
                    }
                }
            });
        });

        res.json(updatedPo);

    } catch (error) {
        if (error.code === 'P2025' || error.message === 'P2025') {
            return res.status(404).json({ message: "Purchase Order not found" });
        }
        console.error("Error updating purchase order status:", error);
        res.status(500).json({ message: "Server Error updating purchase order status" });
    }
};


/**
 * üìå DELETE PURCHASE ORDER
 * ‡∏•‡∏ö‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
 */
exports.deletePurchaseOrder = async (req, res) => {
    try {
        const { id } = req.params;

        // ‚ú® ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö details ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ô Schema ‡∏Å‡∏≥‡∏´‡∏ô‡∏î `onDelete: Cascade` ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
        // Prisma ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö PurchaseOrderDetail ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        const deletedOrder = await prisma.purchaseOrder.delete({
            where: { id: Number(id) },
        });

        res.json({ message: "Purchase Order and all its details deleted successfully." });

    } catch (error) {
        // P2025 ‡∏Ñ‡∏∑‡∏≠ error code ‡∏Ç‡∏≠‡∏á Prisma ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏≤ record ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
        if (error.code === 'P2025') {
            return res.status(404).json({ message: "Purchase Order not found" });
        }
        console.error("Error deleting purchase order:", error);
        res.status(500).json({ message: "Server Error deleting purchase order" });
    }
};