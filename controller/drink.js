const prisma = require('../config/prisma');
const cloudinary = require('cloudinary').v2;

cloudinary.config({
    cloud_name: 'dnplboikb',
    api_key: '298611556276172',
    api_secret: 's-vdRpifR_1slH-EXvz2Ha2Mx4o',
    secure: true,
});

// ====================================================================================
// üìå CREATE DRINK (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
// ====================================================================================
exports.createDrink = async (req, res) => {
    try {
        const { name, categoryId, baseUnitId, price, qty } = req.body;

        if (!name || !baseUnitId || !price) {
            return res.status(400).json({ error: "Name, baseUnitId, and price for single unit are required" });
        }
        if (!req.file) {
            return res.status(400).json({ error: "Image file is required" });
        }

        cloudinary.uploader.upload_stream(
            { folder: "safezone-project" },
            async (error, result) => {
                if (error) {
                    console.error("Cloudinary upload error:", error);
                    return res.status(500).json({ error: "Image Upload Failed" });
                }

                try {
                    const createdData = await prisma.$transaction(async (tx) => {

                        // ‚ú® 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Base Unit) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡πÉ‡∏ä‡πâ ‚ú®
                        const baseUnit = await tx.unit.findUnique({
                            where: { id: parseInt(baseUnitId) },
                        });

                        if (!baseUnit) {
                            // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ baseUnitId ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ transaction rollback
                            throw new Error('Base unit not found.');
                        }

                        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Drink record ‡∏´‡∏•‡∏±‡∏Å
                        const newDrink = await tx.drink.create({
                            data: {
                                name,
                                categoryId: categoryId ? parseInt(categoryId) : null,
                                baseUnitId: parseInt(baseUnitId),
                                qty: qty ? parseInt(qty) : 0,
                                imageUrl: result.secure_url
                            }
                        });

                        // ‚ú® 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á ProductUnit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß" ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å baseUnit ‚ú®
                        await tx.productUnit.create({
                            data: {
                                name: `${name} (${baseUnit.name})`, // <-- ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å baseUnit ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                                price: parseFloat(price),
                                baseItemsCount: 1, // 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß = 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                                drinkId: newDrink.id
                            }
                        });

                        // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
                        return tx.drink.findUnique({
                            where: { id: newDrink.id },
                            include: {
                                Category: true,
                                baseUnit: true,
                                productUnits: true
                            }
                        });
                    });

                    res.status(201).json(createdData);

                } catch (txError) {
                    await cloudinary.uploader.destroy(result.public_id);
                    console.error("Transaction Error creating drink:", txError);
                    res.status(500).json({ message: "Database transaction failed.", error: txError.message });
                }
            }
        ).end(req.file.buffer);

    } catch (error) {
        console.error("Error creating drink:", error);
        res.status(500).json({ message: "Server Error" });
    }
};


// ====================================================================================
// üìå GET ALL DRINKS (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Include)
// ====================================================================================
exports.getDrink = async (req, res) => {
    try {
        // --- ‚¨áÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Include ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Frontend ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‚¨áÔ∏è ---
        const drinks = await prisma.drink.findMany({
            include: {
                Category: true,     // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                baseUnit: true,     // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏Ç‡∏ß‡∏î, ‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)
                productUnits: true  // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ô‡∏µ‡πâ (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏•‡∏±‡∏á, ‡πÅ‡∏û‡πá‡∏Ñ)
            },
            orderBy: {
                id: 'asc'
            }
        });
        // --- ‚¨ÜÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚¨ÜÔ∏è ---

        res.send(drinks);
    } catch (error) {
        console.error("Error fetching drinks:", error);
        res.status(500).json({ message: "Server Error" });
    }
};


// ====================================================================================
// üìå DELETE DRINK (Logic ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Cascade)
// ====================================================================================
exports.deleteDrink = async (req, res) => {
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Logic ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ô Schema ‡∏Ç‡∏≠‡∏á ProductUnit ‡∏°‡∏µ `onDelete: Cascade`
    // ‡∏Å‡∏≤‡∏£‡∏•‡∏ö Drink ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ ProductUnit ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    try {
        const { id } = req.params;
        const drink = await prisma.drink.findUnique({
            where: { id: Number(id) }
        });

        if (!drink) {
            return res.status(404).json({ message: "Drink not found" });
        }

        // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Cloudinary
        if (drink.imageUrl) {
            const publicId = drink.imageUrl.split('/').pop().split('.')[0];
            await cloudinary.uploader.destroy(`safezone-project/${publicId}`);
        }

        // ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (ProductUnits ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
        await prisma.drink.delete({
            where: { id: Number(id) }
        });

        res.json({ message: "Drink and related product units deleted successfully" });
    } catch (error) {
        console.error("Error deleting drink:", error);
        if (error.code === 'P2003') { // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô OrderDetail
            return res.status(400).json({ message: "Cannot delete this drink because it is part of an existing order." });
        }
        res.status(500).json({ message: "Server Error" });
    }
};


// ====================================================================================
// üìå UPDATE DRINK (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
// ====================================================================================
exports.updateDrink = async (req, res) => {
    try {
        const { id } = req.params;
        // --- ‚¨áÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏±‡∏ö Input ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° Schema (‡πÑ‡∏°‡πà‡∏°‡∏µ price) ‚¨áÔ∏è ---
        const { name, categoryId, baseUnitId, qty } = req.body;
        // ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ú‡πà‡∏≤‡∏ô ProductUnit Controller
        // --- ‚¨ÜÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚¨ÜÔ∏è ---

        const drink = await prisma.drink.findUnique({
            where: { id: Number(id) }
        });

        if (!drink) {
            return res.status(404).json({ message: "Drink not found" });
        }

        let imageUrl = drink.imageUrl;
        if (req.file) {
            // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (drink.imageUrl) {
                const publicId = drink.imageUrl.split('/').pop().split('.')[0];
                await cloudinary.uploader.destroy(`safezone-project/${publicId}`);
            }

            // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
            const uploadResult = await new Promise((resolve, reject) => {
                cloudinary.uploader.upload_stream(
                    { folder: "safezone-project" },
                    (error, result) => {
                        if (error) reject(error);
                        else resolve(result);
                    }
                ).end(req.file.buffer);
            });
            imageUrl = uploadResult.secure_url;
        }

        // --- ‚¨áÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô Drink model ‚¨áÔ∏è ---
        const updatedDrink = await prisma.drink.update({
            where: { id: Number(id) },
            data: {
                name: name || undefined,
                categoryId: categoryId ? parseInt(categoryId) : undefined,
                baseUnitId: baseUnitId ? parseInt(baseUnitId) : undefined,
                qty: qty ? parseInt(qty) : undefined,
                imageUrl
            },
            include: { // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
                Category: true,
                baseUnit: true,
                productUnits: true
            }
        });
        // --- ‚¨ÜÔ∏è ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚¨ÜÔ∏è ---

        res.json(updatedDrink);
    } catch (error) {
        console.error("Error updating drink:", error);
        res.status(500).json({ message: "Server Error" });
    }
};